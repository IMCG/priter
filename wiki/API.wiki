#summary PrIter API.

= Configure Job ==


====`void JobConf.setActivatorClass(Class<? extends Activator>);`====
_set the activator class_


====`void JobConf.setUpdatorClass(Class<? extends Updator>);`====
_set the updator class_


====`void JobConf.setPriorityClass(Class<? extends Writable>);`====
_set the priority class_


= User-Defined Functions =


== Along with Activator class ==

====`void initStarter(InputPKVBuffer<V> starter) throws IOException;`====

_to be invoked before iteration starts, init the starter for iterative compuattion_

====`void activate(IntWritable nodeid, V value, OutputCollector<IntWritable, V> output, Reporter reporter);`====

_to be invoked when activating node with value, the neighbors of node will be affected, users specify the values sent to neighbors to realize their algorithm logic_

====`void iterate();`====

_to be invoked after emitting all the results to neighbors after each iteation, implement some tracke codes_

== Along with Updator ==

====`void initStateTable(OutputPKVBuffer<P, V> stateTable);`====
_to be invoked before iteration starts, init statetable_

====`V resetiState();`====
_to be invoked when node record reset, reset the node's iState_

====`P decidePriority(IntWritable nodeid, V iState, boolean iornot);`====
_to be invoked when updating statetable or extracting top k result, decide node's execution priority (based on iState) or priority for online top k query (based on cState)_

====`void updateState(K nodeid, Iterator<V> iState, OutputPKVBuffer<P, V> stateTable, Reporter reporter) throws IOException;`====
_to be invoked when updating StateTable, users specify the update rule to realize their algorithm logic_
	
====`void iterate();`====
_to be invoked after emitting all the results to neighbors after each iteation, implement some tracke codes_